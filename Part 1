Pronto! is Seattle's bike sharing program, which launched in fall 2014. 

PART 1
Loading the Data

# load the libraries
library(readr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(stringr)

# The folder containing my data is in the same folder as this .Rmd. The default 
# working directory will thus contain the data folder.

# make my vector of filenames in the open_data_year_one folder
(files_in_year_one <- list.files("open_data_year_one"))
# remove the status data and README
(files_in_year_one <- files_in_year_one[-c(2, 5)])
We want to read the remaining .csv files into data frames stored in a list called data_list. Preallocate this using data_list <- vector("list", length(files_in_year_one)).

data_list <- vector("list", length(files_in_year_one))
We would like the names of the list entries to be simpler than the file names. For example, we want to read the 2015_station_data.csv file into data_list[["station_data"]], and 2015_trip_data.csv into data_list[["trip_data"]]. So, you should make a new vector called data_list_names giving the names of the objects to read in these CSV files to using files_in_year_one. Use the str_sub() function in library(stringr) to keep the portion of the files_in_year_one entries starting from the sixth character (which will drop the 2015_ part) and stopping at number of characters of each filename string, minus 4 (which will drop the .csv part). Remember to load stringr with library and use ?str_sub in the console to get help on the function.

(data_list_names <- substr(files_in_year_one,
                           start = 6,
                           stop = nchar(files_in_year_one) - 4))
Set the names for data_list using the names() function and the data_list_names vector.

names(data_list) <- data_list_names
data_list
Then, write a for() loop that uses read_csv() from the readr package to read in all the CSV files contained in the ZIP file, seq_alonging the files_in_year_one vector. Store each of these files to its corresponding entry in data_list. The data download demo might be a helpful reference.

# read in the data in the open_data_year_one folder
# paste0 to get the filepaths right
for(i in seq_along(files_in_year_one)) {
    data_list[[i]] <- read_csv(paste0("open_data_year_one/", files_in_year_one[i]))
}
Fixing Data Types
Run str() on data_list and look at how the variables came in from using read_csv(). Most should be okay, but some of the dates and times may be stored as character rather than dates or POSIXct date-time values. We also have lots of missing values for gender in the trip data because users who are not annual members do not report gender.

First, patch up the missing values for gender in data_list[["trip_data"]]: if a user is a Short-Term Pass Holder, then put "Unknown" as their gender. Don't make new objects, but rather modify the entries in data_list directly (e.g. data_list[["trip_data"]] <- data_list[["trip_data"]] %>% mutate(...).

str(data_list) # Output suppressed due to length
# make gender Unknown when user is a short term ride
data_list[["trip_data"]] <- data_list[["trip_data"]] %>%
    mutate(gender = ifelse(usertype == "Short-Term Pass Holder",
                           "Unknown", gender))
Now, use dplyr's mutate_at() and/or mutate(), functions from the lubridate package, and the factor function to (1) fix any date/times, as well as to (2) convert the usertype and gender variables to factor variables from the trip data. Don't make new objects, but rather modify the entries in data_list directly.

# make the date-times valid:

# station_data: make online a date
data_list[["station_data"]] <- data_list[["station_data"]] %>%
    mutate(online=mdy(online))

# trip_data: starttime, stoptime should be date-time
data_list[["trip_data"]] <- data_list[["trip_data"]] %>%
    mutate_at(vars(starttime, stoptime), funs(mdy_hm))

# weather_data: make Date a date
data_list[["weather_data"]] <- data_list[["weather_data"]] %>%
    mutate(Date=mdy(Date))
# change variables with a few values to factors:

# trip_data: usertype, gender
data_list[["trip_data"]] <- data_list[["trip_data"]] %>%
    mutate_at(vars(usertype, gender), funs(factor))
